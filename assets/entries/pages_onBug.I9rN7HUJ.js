import{j as e,L as n,o as l,i as a}from"../chunks/chunk-zan2ai33.js";/* empty css                      *//* empty css                      */import"../chunks/chunk-BenMmNNg.js";/* empty css                      */const s=[];function o(r){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",figure:"figure",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...r.components};return e.jsxs(e.Fragment,{children:[e.jsxs(t.p,{children:[e.jsx(t.strong,{children:"Environment"}),": server."]}),`
`,e.jsxs(t.p,{children:["To track bugs, we use ",e.jsx(t.code,{children:"onBug()"}),":"]}),`
`,e.jsx(t.figure,{"data-rehype-pretty-code-figure":"",children:e.jsx(t.pre,{style:{backgroundColor:"#fff",color:"#24292e"},tabIndex:"0","data-language":"js","data-theme":"github-light",children:e.jsxs(t.code,{"data-language":"js","data-theme":"github-light",style:{display:"grid"},children:[e.jsxs(t.span,{"data-line":"",children:[e.jsx(t.span,{style:{color:"#D73A49"},children:"import"}),e.jsx(t.span,{style:{color:"#24292E"},children:" { onBug } "}),e.jsx(t.span,{style:{color:"#D73A49"},children:"from"}),e.jsx(t.span,{style:{color:"#032F62"},children:" 'telefunc'"})]}),`
`,e.jsx(t.span,{"data-line":"",children:" "}),`
`,e.jsxs(t.span,{"data-line":"",children:[e.jsx(t.span,{style:{color:"#6F42C1"},children:"onBug"}),e.jsx(t.span,{style:{color:"#24292E"},children:"("}),e.jsx(t.span,{style:{color:"#E36209"},children:"err"}),e.jsx(t.span,{style:{color:"#D73A49"},children:" =>"}),e.jsx(t.span,{style:{color:"#24292E"},children:" {"})]}),`
`,e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#6A737D"},children:"  // ..."})}),`
`,e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#24292E"},children:"})"})})]})})}),`
`,e.jsxs(t.p,{children:["This allows us, for example, to install the tracker code of some tracking service (",e.jsx(t.a,{href:"https://sentry.io/",children:"Sentry"}),", ",e.jsx(t.a,{href:"https://www.bugsnag.com/",children:"Bugsnag"}),", ",e.jsx(t.a,{href:"https://rollbar.com/",children:"Rollbar"}),", ...)."]}),`
`,e.jsxs(t.p,{children:[e.jsx(t.code,{children:"onBug()"})," is called:"]}),`
`,e.jsxs(t.ul,{children:[`
`,e.jsxs(t.li,{children:["When a telefunction throws an error that is not ",e.jsx(t.code,{children:"Abort()"}),". (In other words, our telefunction has a bug.)"]}),`
`,e.jsx(t.li,{children:"When Telefunc throws an error. (In other words, Telefunc has a bug)."}),`
`]}),`
`,e.jsxs(t.blockquote,{children:[`
`,e.jsxs(t.p,{children:[e.jsx(t.code,{children:"throw Abort()"})," does ",e.jsx(t.em,{children:"not"})," trigger ",e.jsx(t.code,{children:"onBug()"}),". It's expected that ",e.jsx(t.code,{children:"throw Abort()"})," may be called (when some third-party erroneously calls a telefunction). In other words, ",e.jsx(t.code,{children:"throw Abort()"})," isn't a bug."]}),`
`]})]})}function i(r={}){const{wrapper:t}=r.components||{};return t?e.jsx(t,{...r,children:e.jsx(o,{...r})}):o(r)}const d=Object.freeze(Object.defineProperty({__proto__:null,default:i,pageSectionsExport:s},Symbol.toStringTag,{value:"Module"})),j={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},Layout:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/Layout",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:n}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:l}},TopNavigation:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+TopNavigation.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:a}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/onBug/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:d}}};export{j as configValuesSerialized};
