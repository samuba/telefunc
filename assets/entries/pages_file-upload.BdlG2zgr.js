import{j as e,L as r,o as i,i as l}from"../chunks/chunk-fT863u-F.js";/* empty css                      *//* empty css                      */import"../chunks/chunk-COORwwlf.js";/* empty css                      */const s=[];function o(a){const t={a:"a",code:"code",p:"p",...a.components};return e.jsxs(e.Fragment,{children:[e.jsxs(t.p,{children:["Using Telefunc to upload files is currently only supported by encoding the file as a string, for example as ",e.jsx(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs",children:"Data URL"}),". You can use ",e.jsx(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL",children:e.jsx(t.code,{children:"FileReader.readAsDataURL()"})})," to encode a ",e.jsx(t.code,{children:"File"})," object to a Data URL. However, be aware that files encoded in this way are at least ",e.jsx(t.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Base64#encoded_size_increase",children:"33% larger"}),"."]}),`
`,e.jsxs(t.p,{children:["Another possibility is to use an endpoint separate from Telefunc to handle file uploads. For example, you can use ",e.jsx(t.a,{href:"https://github.com/expressjs/multer",children:"expressjs/multer"})," when using Node.js."]})]})}function n(a={}){const{wrapper:t}=a.components||{};return t?e.jsx(t,{...a,children:e.jsx(o,{...a})}):o(a)}const d=Object.freeze(Object.defineProperty({__proto__:null,default:n,pageSectionsExport:s},Symbol.toStringTag,{value:"Module"})),y={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},Layout:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/Layout",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:r}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:i}},TopNavigation:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+TopNavigation.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:l}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/file-upload/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:d}}};export{y as configValuesSerialized};
