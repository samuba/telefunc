import{j as e,o as i,i as s}from"../chunks/chunk-CoiK8cC8.js";import{L as n}from"../chunks/chunk-DOhJHg63.js";/* empty css                      */import{W as l}from"../chunks/chunk-hyzAWq-9.js";import{M as a}from"../chunks/chunk-wxxeVWLx.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-3ulBLjzN.js";/* empty css                      */const d=[{pageSectionId:"monorepo",pageSectionLevel:2,pageSectionTitle:"Monorepo"},{pageSectionId:"see-also",pageSectionLevel:2,pageSectionTitle:"See also"}];function r(t){const o={code:"code",figure:"figure",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...t.components};return e.jsxs(e.Fragment,{children:[e.jsxs(o.p,{children:[e.jsx(o.strong,{children:"Environment"}),": server."]}),`
`,e.jsx(l,{children:"This is a beta feature."}),`
`,e.jsxs(o.p,{children:["If you use ",e.jsx(n,{href:"/telefuncFiles",children:e.jsx(o.code,{children:"config.telefuncFiles"})}),", then you also need to set ",e.jsx(o.code,{children:"config.root"}),"."]}),`
`,e.jsx(o.figure,{"data-rehype-pretty-code-figure":"",children:e.jsx(o.pre,{style:{backgroundColor:"#fff",color:"#24292e"},tabIndex:"0","data-language":"js","data-theme":"github-light",children:e.jsxs(o.code,{"data-language":"js","data-theme":"github-light",style:{display:"grid"},children:[e.jsx(o.span,{"data-line":"",children:e.jsx(o.span,{style:{color:"#6A737D"},children:"// Environment: server"})}),`
`,e.jsx(o.span,{"data-line":"",children:" "}),`
`,e.jsxs(o.span,{"data-line":"",children:[e.jsx(o.span,{style:{color:"#D73A49"},children:"import"}),e.jsx(o.span,{style:{color:"#24292E"},children:" { config } "}),e.jsx(o.span,{style:{color:"#D73A49"},children:"from"}),e.jsx(o.span,{style:{color:"#032F62"},children:" 'telefunc'"})]}),`
`,e.jsx(o.span,{"data-line":"",children:" "}),`
`,e.jsx(o.span,{"data-line":"",children:e.jsx(o.span,{style:{color:"#6A737D"},children:"// Your project's root directory"})}),`
`,e.jsxs(o.span,{"data-line":"",children:[e.jsx(o.span,{style:{color:"#24292E"},children:"config.root "}),e.jsx(o.span,{style:{color:"#D73A49"},children:"="}),e.jsx(o.span,{style:{color:"#24292E"},children:" __dirname"})]})]})})}),`
`,e.jsxs(o.p,{children:["The ",e.jsx(o.code,{children:"config.root"})," setting is only needed if you use ",e.jsx(n,{href:"/telefuncFiles",children:e.jsx(o.code,{children:"config.telefuncFiles"})}),"."]}),`
`,e.jsx(a,{}),`
`,e.jsx("h2",{id:"monorepo",children:"Monorepo"}),`
`,e.jsxs(o.p,{children:["If you have a monorepo structure, then set ",e.jsx(o.code,{children:"config.root"})," to the root directory of your client-side (i.e. the root of Vite/Vike/Next.js/Nuxt/...). Don't set ",e.jsx(o.code,{children:"config.root"})," to the monorepo root, nor to the root directory of your server. (The ",e.jsx(o.code,{children:"config.root"})," setting enables Telefunc to match your ",e.jsx(o.code,{children:".telefunc.js"})," files/imports between the server-side and the client-side.)"]}),`
`,e.jsx("h2",{id:"see-also",children:"See also"}),`
`,e.jsxs(o.ul,{children:[`
`,e.jsxs(o.li,{children:[`
`,e.jsx(n,{href:"/telefuncFiles"}),`
`]}),`
`,e.jsxs(o.li,{children:[`
`,e.jsx(n,{href:"/transformer"}),`
`]}),`
`]})]})}function c(t={}){const{wrapper:o}=t.components||{};return o?e.jsx(o,{...t,children:e.jsx(r,{...t})}):r(t)}const p=Object.freeze(Object.defineProperty({__proto__:null,default:c,pageSectionsExport:d},Symbol.toStringTag,{value:"Module"})),D={clientEntryLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:i}},NavHeader:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+NavHeader.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:s}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/root/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:p}}};export{D as configValuesSerialized};
